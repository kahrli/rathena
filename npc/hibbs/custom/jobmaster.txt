//===== rAthena Script =======================================
//= Job Master
//===== By: ==================================================
//= Euphy
//===== Current Version: =====================================
//= 1.3
//===== Compatible With: ===================================== 
//= rAthena SVN r16114+
//===== Description: =========================================
//= A fully functional job changer.
//===== Additional Comments: =================================
//= 1.0 Initial script.
//= 1.1 Fixed reset on Baby job change.
//= 1.2 Added Expanded Super Novice support and initial Kagerou/Oboro support.
//= 1.3 Kagerou/Oboro added.
//============================================================
prontera,151,190,5	script	Job Master	123,{
	mes "^ff0000[Job Master]^000000";
	if(
		((Class >=Job_Rune_Knight_T && Class <= Job_Guillotine_Cross_T) || (Class >=Job_Royal_Guard_T && Class <=Job_Mechanic_T2))
			&& !(Class == Job_Ranger2 || Class == Job_Rune_Knight2 || Class == Job_Royal_Guard2 || Class == Job_Mechanic2))
		goto L_noReq;
	//if(Upper == 1 && Class >= Job_Lord_Knight) goto L_noReq;
	if(SkillPoint != 0){
		mes "I'm sorry, please use up all your skill points before changing jobs";
		mes "Please come again soon!";
		close;
	}
	if(JobLevel < 10) goto L_LvError;
	switch(Class){
		case Job_Novice_High:
		case Job_Baby:
		case Job_Novice:
			skill 142,1,0;
			skill 143,1,0;
			mes "Welcome, please select the job you wish to change into";
			if(lastJob != 0 && Class == Job_Novice_High){
				switch(lastJob){
					case Job_Knight:
					case Job_Crusader:
						set @target_job, Job_Swordman_High;
						break;
					case Job_Monk:
					case Job_Priest:
						set @target_job, Job_Acolyte_High;
						break;
					case Job_Alchemist:
					case Job_Blacksmith:
						set @target_job, Job_Merchant_High;
						break;
					case Job_Rogue:
					case Job_Assassin:
						set @target_job, Job_Thief_High;
						break;
					case Job_Wizard:
					case Job_Sage:
						set @target_job, Job_Mage_High;
						break;
					case Job_Hunter:
					case Job_Bard:
					case Job_Dancer:
						set @target_job, Job_Archer_High;
						break;
							}
			} else {
				switch(select("Swordsman","Mage","Archer","Acolyte","Merchant","Thief",
					"Super Novice","Taekwon","Gunslinger","Ninja")){
						case 7:
							if(Class == Job_Novice_High) goto L_noReq;
							if($@JC_SupNovM > BaseLevel) goto L_BvError;
							if(Upper == 2)
								set @target_job, Job_Super_Baby;
							else
								set @target_job, Job_SuperNovice;
							break;
						case 8:
							if(Class == Job_Novice_High) goto L_noReq;
							if(Upper == 2) goto L_noReq;
							set @target_job, Job_Taekwon;
							break;
						case 9:
						case 10:
							if(Class == Job_Novice_High || Upper == 2) goto L_noReq;
							set @target_job, @menu + 15;
							break;
						default:
							set @target_job, @menu;
							if(Class == Job_Novice_High) set @target_job, @target_job + 4001;
							break;
					}
			}
			mes "Are you sure you want to change to " + JobName(@target_job) + "?";
			if(select("No","Yes") == 2){
				callfunc "Job_Change", @target_job;
				if(@target_job == Job_Gunslinger || @target_job == Job_Ninja || @target_job == Job_Taekwon) {
					callfunc "F_ClearJobVar";
				} else {
					if($@JC_Plat) goto L_GivePlat;
				}
			}
			close;
			break;
		default:
			if(JobLevel < $@JC_MinimumJB) goto L_LvError;
			deletearray @job_opt, getarraysize(@job_opt);
			if(Class < Job_Knight || Class == Job_Taekwon || (Class > Job_Baby && Class < Job_Baby_Knight) || (Class > Job_Novice_High && Class < Job_Lord_Knight)){
				if(lastJob != 0){
					set @target_job, lastJob + 4001;
				} else {
					switch(Class){
						case Job_Swordman_High:
						case Job_Baby_Swordman:
						case Job_Swordman:
							set @job_opt[0], Job_Knight;
							set @job_opt[1], Job_Crusader;
							break;
						case Job_Mage_High:
						case Job_Baby_Mage:
						case Job_Mage:
							set @job_opt[0], Job_Wizard;
							set @job_opt[1], Job_Sage;
							break;
						case Job_Archer_High:
						case Job_Baby_Archer:
						case Job_Archer:
							set @job_opt[0], Job_Hunter;
							if(Sex == 0)
								set @job_opt[1], Job_Dancer;
							else
								set @job_opt[1], Job_Bard;
							break;
						case Job_Acolyte_High:
						case Job_Baby_Acolyte:
						case Job_Acolyte:
							set @job_opt[0], Job_Priest;
							set @job_opt[1], Job_Monk;
							break;
						case Job_Merchant_High:
						case Job_Baby_Merchant:
						case Job_Merchant:
							set @job_opt[0], Job_Blacksmith;
							set @job_opt[1], Job_Alchemist;
							break;
						case Job_Thief_High:
						case Job_Baby_Thief:
						case Job_Thief:
							set @job_opt[0], Job_Assassin;
							set @job_opt[1], Job_Rogue;
							break;						
						default:
							set @job_opt[0], Job_Star_Gladiator;
							set @job_opt[1], Job_Soul_Linker;
							break;
					}
					mes "Welcome, please select the job you wish to change into";
					set @target_job, @job_opt[select(JobName(@job_opt[0]), JobName(@job_opt[1]))-1];
					if(Class > Job_Novice_High && Class < Job_Lord_Knight) set @target_job, @target_job + 4001;
				}
				mes "Are you sure you want to change to " + JobName(@target_job) + "?";
				if(select("No","Yes")==2){
					callfunc "Job_Change", @target_job;
					if(@target_job == Job_Star_Gladiator || @target_job == Job_Soul_Linker) {
						callfunc "F_ClearJobVar";
					} else {
						if($@JC_Plat) goto L_GivePlat;
					}
				}
				close;
			}
			if(checkfalcon() || checkcart() || checkriding()) goto L_remove;
			if((Class >=Job_Knight) && (Class <=Job_Crusader2)){
				mes "Do you want to rebirth?";
				mes "You also have the choice to change to a 3rd class, but you'll miss out on the transcendant bonuses.";
				switch(select("Rebirth:3rd class:Cancel")) {
					case 1:
						if(BaseLevel < 99 || JobLevel < 50) goto L_cantCh;
						set lastJob, Class;
						if(Class == Job_Knight2){
							set lastJob, Job_Knight;
						} else {
							if(Class == Job_Crusader2){
								set lastJob, Job_Crusader;
							}
						}
						jobchange Job_Novice_High;
						resetlvl(1);
						skill 142,1,0;
						skill 143,1,0;
						break;
					case 2:
						if(BaseLevel < 99 || JobLevel < 50) goto L_cantCh;
						set lastJob, Class;
						if(Class == Job_Knight2){
							set lastJob, Job_Knight;
						} else {
							if(Class == Job_Crusader2){
								set lastJob, Job_Crusader;
							}
						}
						switch(Class) {
							case Job_Knight: jobchange Job_Rune_Knight; break;
							case Job_Priest: jobchange Job_Archbishop; break;
							case Job_Wizard: jobchange Job_Warlock; break;
							case Job_Blacksmith: jobchange Job_Mechanic; break;
							case Job_Hunter: jobchange Job_Ranger; break;
							case Job_Assassin: jobchange Job_Guillotine_Cross; break;
							case Job_Knight2: jobchange Job_Rune_Knight; break;
							
							case Job_Crusader: jobchange Job_Royal_Guard; break;
							case Job_Monk: jobchange Job_Sura; break;
							case Job_Sage: jobchange Job_Sorcerer; break;
							case Job_Rogue: jobchange Job_Shadow_Chaser; break;
							case Job_Alchemist: jobchange Job_Genetic; break;
							case Job_Bard: jobchange Job_Minstrel; break;
							case Job_Dancer: jobchange Job_Wanderer; break;
							case Job_Crusader2: jobchange Job_Royal_Guard; break;
						}
						break;
					default:
						break;
				}
				close;
			}
			if(
				((Class >=Job_Rune_Knight) && (Class <=Job_Guillotine_Cross)) || ((Class >=Job_Royal_Guard) && (Class <=Job_Shadow_Chaser))
				|| (Class == Job_Ranger2 || Class == Job_Rune_Knight2 || Class == Job_Royal_Guard2 || Class == Job_Mechanic2)){
				mes "Do you want to rebirth?";
				if(select("Yes:No") == 1) {
					// if(BaseLevel < 99 || JobLevel < 50) goto L_cantCh;
					jobchange Job_Novice_High;
					resetlvl(1);
					skill 142,1,0;
					skill 143,1,0;
				}
				close;
			}
			if((Class >=Job_Baby_Knight) && (Class <=Job_Baby_Crusader2)){
				mes "Do you want to change to your 3rd class?";
				if(select("Yes:No")==1) {
					if(BaseLevel < 99 || JobLevel < 50) goto L_cantCh;
					switch(Class) {
						case Job_Baby_Knight: jobchange Job_Baby_Rune; break;
						case Job_Baby_Priest: jobchange Job_Baby_Bishop; break;
						case Job_Baby_Wizard: jobchange Job_Baby_Warlock; break;
						case Job_Baby_Blacksmith: jobchange Job_Baby_Mechanic; break;
						case Job_Baby_Hunter: jobchange Job_Baby_Ranger; break;
						case Job_Baby_Assassin: jobchange Job_Baby_Cross; break;
						case Job_Baby_Knight2: jobchange Job_Baby_Rune; break;
						
						case Job_Baby_Crusader: jobchange Job_Baby_Guard; break;
						case Job_Baby_Monk: jobchange Job_Baby_Sura; break;
						case Job_Baby_Sage: jobchange Job_Baby_Sorcerer; break;
						case Job_Baby_Rogue: jobchange Job_Baby_Chaser; break;
						case Job_Baby_Alchemist: jobchange Job_Baby_Genetic; break;
						case Job_Baby_Bard: jobchange Job_Baby_Minstrel; break;
						case Job_Baby_Dancer: jobchange Job_Baby_Wanderer; break;
						case Job_Crusader2: jobchange Job_Baby_Guard; break;
					}
				}
				close;
			}
			if((Class >=Job_Lord_Knight) && (Class <=Job_Paladin2)){
				mes "Do you want to change to your 3rd class?";
				if(select("Yes:No")==1) {
					if(BaseLevel < 99 || JobLevel < 50) goto L_cantCh;
					switch(Class) {
						case Job_Lord_Knight: jobchange Job_Rune_Knight_T; break;
						case Job_High_Priest: jobchange Job_Archbishop_T; break;
						case Job_High_Wizard: jobchange Job_Warlock_T; break;
						case Job_Whitesmith: jobchange Job_Mechanic_T; break;
						case Job_Sniper: jobchange Job_Ranger_T; break;
						case Job_Assassin_Cross: jobchange Job_Guillotine_Cross_T; break;
						case Job_Lord_Knight2: jobchange Job_Rune_Knight_T; break;
						
						case Job_Paladin: jobchange Job_Royal_Guard_T; break;
						case Job_Champion: jobchange Job_Sura_T; break;
						case Job_Professor: jobchange Job_Sorcerer_T; break;
						case Job_Stalker: jobchange Job_Shadow_Chaser_T; break;
						case Job_Creator: jobchange Job_Genetic_T; break;
						case Job_Clown: jobchange Job_Minstrel_T; break;
						case Job_Gypsy: jobchange Job_Wanderer_T; break;
						case Job_Paladin2: jobchange Job_Royal_Guard_T; break;
					}
				}
				close;
			}
	}
	mes "I'm sorry, there are no further classes for your job.";
	close;

L_GivePlat:
	if (BaseClass==Job_SuperNovice) goto L_sSuperN;
	if (BaseClass==Job_Swordman) goto L_sSword;
	if (BaseClass==Job_Mage) goto L_sMage;
	if (BaseClass==Job_Archer) goto L_sArcher;
	if (BaseClass==Job_Acolyte) goto L_sAcolyte;
	if (BaseClass==Job_Merchant) goto L_sMerchant;
	if (BaseClass==Job_Thief) goto L_sThief;
	close;
L_sSuperN:
	skill 142,1,0;
	close;
L_sSword:
	skill 142,1,0;
	skill 144,1,0;
	skill 145,1,0;
	skill 146,1,0;
	close;
L_sMage:
	skill 142,1,0;
	skill 157,1,0;
	close;
L_sArcher:
	skill 142,1,0;
	skill 147,1,0;
	skill 148,1,0;
	close;
L_sAcolyte:
	skill 142,1,0;
	skill 156,1,0;
	close;
L_sMerchant:
	skill 142,1,0;
	skill 153,1,0;
	skill 154,1,0;
	skill 155,1,0;
	close;
L_sThief:
	skill 142,1,0;
	skill 149,1,0;
	skill 150,1,0;
	skill 151,1,0;
	skill 152,1,0;
	close;

L_cantCh:
	mes "I'm sorry, you do not meet the requirements to change";
	mes "Please come again soon!";
	close;

L_LvError:
	mes "I'm sorry, you do not seem to have enough Job Levels";
	mes "Please come again soon!";
	close;

L_BvError:
	mes "I'm sorry, you do not seem to have enough Base Levels";
	mes "Please come again soon!";
	close;

L_noReq:
	mes "I'm sorry, there are no further classes for your job.";
	close;

L_remove:
	mes "Please remove your cart,falcon or peco";
	mes "Please come again soon!";
	close;

OnInit:
	// Variable Setup
	set $@JC_MinimumJB, 40; //Minimum job level for changing between 2nd and advance Class (Default : 40)
	set $@JC_Plat, 0; //Give Platinum skills on Jobchange (Default : 1-yes)
	set $@JC_SupNovM, 45; //Base Level to change into Super Novice (Default : 45)
	end;
}