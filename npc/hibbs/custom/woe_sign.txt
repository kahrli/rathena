//==============================================================
//= WoE Info Banner
//===== By: ====================================================
//= iHeart
//===== Current Version: =======================================
//= 1.11
//===== Description: ===========================================
//= An NPC that provides information on the next WoE session
//=
//= Also has a builtin WoE Controller function which controls
//= castle based WoE by utilising npc events.
//= If you do plan on using the controller functions remember 
//= to disable npc/guild/agit_controller.txt or paste this 
//= script in it
//= To enable it look for .active_woe in the CONFIG section and
//= set to 1.
//=
//= This script is kinda @reloadscript/@loadnpc safe, provided 
//= that someone clicks the NPCs afterwards to start the OnInit
//= function. That said..it is recommended that you don't use
//= @reloadscript/@loadnpc but reset.
//===== Changelog: =============================================
//= 1.11
//= - Fixed timer glitch when players only configured sessions
//=   for one day of the week
//= - Adjusted timer to show remaining time more accurately
//= - Modified .num_woes calculation due to bug regarding
//=   0's being counted as unset values in arrays
//= 1.10
//= - Expanded script to allow castle based configuration
//= - Moved away from portal based woe control. Now using
//=   donpcevents to OnAgitEnd/2 events. Provided castles
//=   are linked to the main agit commands in this manner, 
//=   they will be controllable using this script.
//= - Added an onLoadMap WoE available notifier. Can be disabled
//=   by setting .notify_woe to 0 in the CONFIG section
//= - Did some funky color coding.
//= - Added Coordinate based warping per region (see .region_x &
//=   .region_y in the CONSTANTS section)
//= 1.02
//= - Added delwaitingroom to banner npc to prevent memory
//=   leaks from bug #2325
//= - To reduce spamming of waitingroom packets to players
//=   banner NPC only now updates when the banner text
//=   changes. Thus min time between updates is now 1sec 
//=   regardless of setting.
//= - Added setting for rate which banner time is updated
//=   (.banner_refresh_rate) in the CONFIG section.
//= - Added agitstart2/end2 to provide WoE2 support (Hope it
//=   works ^_^;)
//= 1.01
//= - Hardcoded in refresh value for banner npc instead of
//=   getting it from config from WoEInfoBase. Had issues 
//=   starting the script after @reloadscript/@loadnpc
//==============================================================
-	script	WoEInfoBase	-1,{

	OnStart:
			
		if(.init == 0)
			donpcevent strnpcinfo(3)+"::OnInit";
	
	OnStart2:
		
		mes "The " + ((.state)?"^00DD00current":"^DD0000next") + "^000000 War is: ";
		mes " ";
		mes "Day: ^0000DD" + .daysOfWeek$[.woe_day[.woe_index]];
		mes "^000000Start time: ^00DD00" + .woe_0_str$[.woe_index];
		mes "^000000End time: ^DD0000" + .woe_1_str$[.woe_index];
		
		set .@state_strs$, ".woe_state_str_" + .woe_state[.woe_index] + "$";
		for(set .@i, 0; .@i < .num_regions; set .@i, .@i + 1) {
			set .@output$, getd(.@state_strs$ + "[" + .@i + "]");
			if(.@output$ != "")
				mes "^000000Region: ^0000DD" + .@output$;
		}

		select(
			"",
			"View Castle Owners",
			"View all War times");
			
		switch(@menu) {
			case 2:		//view			
				set .@woe_state_array$, ".woe_state_" + .woe_state[.woe_index];
				for(set .@i, 0; .@i < .num_regions; set .@i, .@i + 1) {
					set .@k, 0;
					set .@castles$, ".castles_" + .regions$[.@i] + "$";
					set .@castle_check, getd(.@woe_state_array$ + "[" + .@i + "]");
					while(.@castle_check && .@k < .num_castles[.@i]) {
						if(.@castle_check & (1 << .@k)) {
							set .@map$, getd(.@castles$+"["+.@k+"]");
							if (GetCastleData(.@map$,1)) {
								dispbottom "The [" + GetCastleName(.@map$) + "] castle of the [" + .region_names$[.@i] + "] region is currently held by the [" + GetGuildName(GetCastleData(.@map$,1)) + "] guild.";
							} else {
								dispbottom "The [" + GetCastleName(.@map$) + "] castle of the [" + .region_names$[.@i] + "] region is currently unoccupied.";
							}
							set .@castle_check, .@castle_check - (1 << .@k);
						}
						set .@k, .@k + 1;		
					}
				}
				break;
			case 3:		//woe times
				for(set .@i, 0; .@i < .num_woes; set .@i, .@i + 1) {							
					set .@woe_state_str_array$, ".woe_state_str_" + .woe_state[.@i] + "$";
					for(set .@k, 0; .@k < .num_regions; set .@k, .@k + 1) {
						set .@output$, getd(.@woe_state_str_array$ + "[" + .@k + "]");
						if(.@output$ != "")
							dispbottom .@output$ + ": " + .daysOfWeek$[.woe_day[.@i]] + " " + .woe_0_str$[.@i] + "-" + .woe_1_str$[.@i];
					}
				}
				break;
			default: close;		
		}
		next;
		goto OnStart2;
	
	OnInit:
	
		//-----------------------------------------------------------------------------------------//
		//CONFIG START                                                                             //
		//-----------------------------------------------------------------------------------------//
		
		set .gm_access, 60;
		
		//WoE timings needs to be ordered ascendingly unless you want to do weird 
		//stuff like skip a region every other week or so...
		//Also times can't overlap. Uses second of day(gettimetick(1)) for timing
		// eg 1am -> 3600, 2:30pm -> 52200, midnight -> 86400 (anything past that doesn't work)
		//Note: woe_0 is start times, woe_1 is end times. Ignore how it's called but
		//		 don't change it either since it's dynamically used
		//		 Also..woe has to end on the same day it starts (it's easier that way..)
		setarray .woe_day[0],	0,2,4,4,6,6;
		setarray .woe_start[0],	8,11,1,12,2,20;
		for (set .@i,0; .@i<getarraysize(.woe_start); set .@i,.@i+1) {
			setarray .woe_0[.@i],.woe_start[.@i]*3600;
			setarray .woe_1[.@i],.woe_0[.@i]+3600;
		}
		setarray .woe_state[0],	0,1,2,3,4,5;

		//WoE state settings. Every WoE session can be defined as a particular state of castle configuration.
		//.woe_state_#[%] = $
		// # - state number
		// % - region number
		// $ - binary representation of castles that are active for that region in that state (
		//     (ie. 0 is no castles, 5 is castle 0 and 2  (2^0 + 2^2 = 5))
		setarray .woe_state_0[5],1;
		setarray .woe_state_1[2],1;
		setarray .woe_state_2[3],1;
		setarray .woe_state_3[4],1;
		setarray .woe_state_4[0],1;
		setarray .woe_state_5[1],1;

		//-----------------------------------------------------------------------------------------//
		//CONFIG END                                                                               //
		//-----------------------------------------------------------------------------------------//
		
		
		//-----------------------------------------------------------------------------------------//
		//CONSTANTS START - Don't touch this unless you know what you are doing                    //
		//-----------------------------------------------------------------------------------------//
		
		//castle maps by region
		setarray .castles_prtg$[0],"prtg_cas01";
		setarray .castles_payg$[0],"payg_cas04";
		setarray .castles_gefg$[0],"gefg_cas01";
		setarray .castles_aldeg$[0],"aldeg_cas04";
		setarray .castles_arug$[0],"arug_cas01";
		setarray .castles_schg$[0],"schg_cas01";
		
		//region prefixs
		setarray .regions$[0],"prtg","payg","gefg","aldeg","arug","schg";
		
		//region info
		setarray .region_names$[0],"Kriemhild", "Sacred Altar", "Repherion", "Wuerzberg", "Mardol", "Himinn";
		setarray .region_maps$[0],"prt_gld", "pay_gld", "gef_fild13", "alde_gld", "aru_gld", "sch_gld";
		//coords to warp player to region (0 is random)
		setarray .region_x[0],0, 0, 0, 0, 0, 0;
		setarray .region_y[0],0, 0, 0, 0, 0, 0;
		
		setarray .waitMsg$[0], "WoE Starts: ", "WoE Ends: ";
		setarray .startMsg$[0], "WoE is Starting", "WoE is Ending";
	
		set .ticks_in_day, 86400;	//mmm...magic numbers
		setarray .daysOfWeek$[0], "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday";


		set .timer_refresh_rate, 500;	//how many ms per timer refresh...keep less than 1000 (in milliseconds)
		set .change_state_sleep, 3000;	//how long to show "WoE is Start|End-ing" msg for in ms. (in milliseconds)
									//Make sure WoE sessions are longer than this xD
		set .banner_refresh_rate, 10;	//how many seconds per banner refresh...keep 1 or above (in seconds)
		
		//-----------------------------------------------------------------------------------------//
		//CONSTANTS END                                                                            //
		//-----------------------------------------------------------------------------------------//

		set .num_regions, getarraysize(.regions$);
		set .num_woes, getarraysize(.woe_1);
		
		for(set .@i, 0; .@i < .num_regions; set .@i, .@i + 1) {
			//count num castles per region
			set .num_castles[.@i], getarraysize(getd(".castles_" + .regions$[.@i] + "$"));
		}
		
		//convert timestamps to readable format
		for(set .@i, 0; .@i < .num_woes; set .@i, .@i + 1)
		{
			set .@hrs, .woe_0[.@i] / 3600;
			set .@mins, .woe_0[.@i] % 3600 / 60;
			set .@output$, ((.@hrs % 12)?.@hrs%12:12) + ":" + ((.@mins < 10)?"0"+.@mins:.@mins) + " " + ((.@hrs >= 12)?"PM":"AM");	
			
			set .woe_0_str$[.@i], .@output$;		
			
			set .@hrs, .woe_1[.@i] / 3600;
			set .@mins, .woe_1[.@i] % 3600 / 60;
			set .@output$, ((.@hrs % 12)?.@hrs%12:12) + ":" + ((.@mins < 10)?"0"+.@mins:.@mins) + " " + ((.@hrs >= 12)?"PM":"AM");	
			
			set .woe_1_str$[.@i], .@output$;		
		}
		
		//calc number of woe states
		set .num_states, 0;
		while(getarraysize(getd(".woe_state_" + (.num_states)))) {
			set .num_states, .num_states + 1;
		}
		
		//convert states to readable format
		for(set .@i, 0; .@i < .num_states; set .@i, .@i + 1) {							
			set .@woe_state_array$, ".woe_state_" + .@i;
			for(set .@k, 0; .@k < .num_regions; set .@k, .@k + 1) {
				set .@castles$, ".castles_" + .regions$[.@k] + "$";
				set .@castle_check, getd(.@woe_state_array$ + "[" + .@k + "]");
				if(.@castle_check == 0) {
					continue;
				} else {			
					if(.@castle_check >= ((1 << .num_castles[.@k]) - 1)) {
						//includes all castles...just list as region.
						setd(".woe_state_str_" + .@i + "$[" + .@k + "]", .region_names$[.@k]);
					} else {
						set .@j, 0;
						set .@output$, "";
						while(.@j < .num_castles[.@k]) {
							if(.@castle_check & (1 << .@j)) {
								set .@output$, .@output$ + GetCastleName(getd(.@castles$+"["+.@j+"]"));
								set .@castle_check, .@castle_check - (1 << .@j);
								if(.@castle_check) {
									if(.@output$ != "") 
									set .@output$, .@output$ + ", ";
								} else
									break;
							}
							set .@j, .@j + 1;
						}
						setd(".woe_state_str_" + .@i + "$[" + .@k + "]", .region_names$[.@k] + " ("+  .@output$ + ")");
					}
				}
			}
		}
		
		donpcevent strnpcinfo(3)+"::OnFindCurIndex";	
		set .count_tick, getd(".woe_" + .state + "[" + .woe_index + "]");
		set .count_tick, gettimetick(2) + .count_tick - gettimetick(1) +
					(.woe_day[.woe_index] - gettime(4) + 7) % 7 * .ticks_in_day;
		
		set .init, 1;
	
	OnWoETimer:
	
		//timer stuff
		while (1) {
			set .remainTime, .count_tick - gettimetick(2);
			set .bannerTimer, .remainTime - (.remainTime % .banner_refresh_rate) + .banner_refresh_rate;
			set .min, .bannerTimer / 60;
			set .sec, .bannerTimer - .min * 60;
			set .hr, .min / 60;
			set .min, .min - .hr * 60;
			set .roomMsg$, .waitMsg$[.state] + .hr + ":" + ((.min < 10 )?"0":"") + .min + ":" + ((.sec < 10 )?"0":"") + .sec;
			sleep .timer_refresh_rate;
			
			if(.remainTime <= 0) {					
				set .roomMsg$, .startMsg$[.state];
				
				set .woe_index, (.woe_index + .state) % .num_woes;	//go to next index if needed
				set .state, (.state + 1) % 2;					//flip state

				donpcevent strnpcinfo(3)+"::OnUpdateCountTick";
				sleep .change_state_sleep;
			}
		}
		end;	//obligatory end =D		

	OnUpdateCountTick:
		set .count_tick, getd(".woe_" + .state + "[" + .woe_index + "]");
		set .count_tick, gettimetick(2) + .count_tick - gettimetick(1) +
					(.woe_day[.woe_index] - gettime(4) + 7) % 7 * .ticks_in_day;

		if(gettimetick(2) > .count_tick)
			set .count_tick, .count_tick + 7 * .ticks_in_day;
		end;
	
	OnFindCurIndex:
	
		set .@cur_day, gettime(4);		
		set .@cur_tick, gettimetick(1);
		
		set .woe_index, 0;
		set .state, 0;
		
		for(set .@i, 0; .@i < .num_woes; set .@i, .@i + 1) {
			if(.woe_day[.@i] < .@cur_day)
				continue;
		
			if(.woe_day[.@i] == .@cur_day) {
				if(.woe_0[.@i] >= .@cur_tick) {
					set .woe_index, .@i;
					set .state, 0;
					break;
				}
				if(.woe_1[.@i] >= .@cur_tick) {
					set .woe_index, .@i;
					set .state, 1;
					break;
				}
			}
			if(.woe_day[.@i] > .@cur_day) {
				set .woe_index, .@i;
				set .state, 0;
				break;
			}		
		}
		end;
		
}
prontera,146,188,6	script	War of Emperium	837,{
	if(getwaitingroomstate(3, strnpcinfo(3)) == -1)
		donpcevent strnpcinfo(3)+"::OnInit";

	doevent "WoEInfoBase::OnStart";
	end;
	
	OnInit:
		while (1) {
			//only updates if msg is different
			set .banner$, getwaitingroomstate(4, strnpcinfo(3));
			if(getvariableofnpc(.roomMsg$, "WoEInfoBase") != .banner$) {
				delwaitingroom;
				waitingroom getvariableofnpc(.roomMsg$, "WoEInfoBase"), 0;
			}
			sleep 500;
		}
		end;
}

//zomg! it duplicates!!
//prontera,156,196,6	duplicate(WoE Info)	WoE Info#2winfo	837
